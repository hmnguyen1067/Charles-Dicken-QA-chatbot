services:
  s3:
    container_name: s3_minio
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    restart: always
    environment:
      - MINIO_ROOT_USER=minio_user
      - MINIO_ROOT_PASSWORD=minio_password
      - MINIO_ADDRESS=:9000
      - MINIO_PORT=9000
      - MINIO_STORAGE_USE_HTTPS=False
      - MINIO_CONSOLE_ADDRESS=:9001
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - s3_minio_data:/data
    command: server /data --console-address :9001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  # Create a bucket named "mlflow" on MinIO if it doesn't exist
  minio_create_bucket:
    container_name: minio_create_bucket
    image: minio/mc
    depends_on:
      s3:
        condition: service_healthy
    entrypoint: >
      bash -c "
      mc alias set minio http://s3:9000 minio_user minio_password;
      if ! mc ls minio/mlflow_llm; then
        echo 'Creating mlflow_llm bucket...';
        mc mb minio/mlflow_llm
        mc policy download minio/mlflow_llm
        echo 'mlflow_llm bucket created';
      else
        echo 'mlflow_llm bucket already exists'
      fi
      "
  # PostgreSQL-MLFlow database
  mlflow_db:
    container_name: mlflow_db
    image: postgres:14
    restart: always
    environment:
      - POSTGRES_USER=mlflow
      - POSTGRES_PASSWORD=mlflow
      - POSTGRES_DB=mlflow_llm
    ports:
      - "5433:5432"
    volumes:
      - mlflow_llm_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 5s
      timeout: 5s
      retries: 3
  mlflow_tracking_server:
    container_name: mlflow_server
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    depends_on:
      mlflow_db:
        condition: service_healthy
      s3:
        condition: service_healthy
      minio_create_bucket:
        condition: service_completed_successfully
    restart: always
    environment:
      - AWS_ACCESS_KEY_ID=minio_user
      - AWS_SECRET_ACCESS_KEY=minio_password
      - MLFLOW_S3_ENDPOINT_URL=http://s3:9000
      - MLFLOW_S3_IGNORE_TLS=true
    ports:
      - "5000:5000"
    command: >
      mlflow server
      --backend-store-uri postgresql://mlflow:mlflow@mlflow_db:5432/mlflow_llm
      --host 0.0.0.0
      --serve-artifacts
      --artifacts-destination s3://mlflow_llm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mlflow_llm_data:
  s3_minio_data:
